/**
 * Gradle build file for the RAMCloud Java bindings.
 * Build with "./gradlew build"
 * Run unit tests with "./gradlew test"
 * Change currentBranch to match your current git branch
 */

def sourceDir = 'src/main'
def buildDir = 'bin'
def libDir = 'lib'
def testSourceDir = 'src/test'
def ramcloudPath = '../..'

def currentBranch = 'master';
def dependencyPaths = buildDir + ':'

/**
 * Error to throw when something goes wrong with the build
 */
class CompilationError extends GradleException {
    CompilationError(String message) {
        super(message);
    }
}

/**
 * Build task to handle java compilation
 */
class JavaBuildTask extends DefaultTask {
    def File inputDir
    def depPaths
    
    @InputFiles
    def FileCollection inputs

    @OutputDirectory
    def File outputDir

    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        inputs.outOfDate { change ->
            // Convert to relative path
            def relativePath = change.file.path.minus(inputDir.path + '/')
            ant.javac(srcdir: inputDir.path,
                      destdir: outputDir.path,
                      classpath: depPaths,
                      debug: true,
                      includeantruntime: false) {
                include(name: relativePath)
            }
            println "Compiled: ${relativePath}"
        }
    }
}

/**
 * Build task to handle C++ compilation and JNI header file generation
 */
class CppBuildTask extends DefaultTask {
    def File inputDir
    def File ramcloudDir
    def branch

    @InputFiles
    def FileCollection inputs

    @OutputDirectory
    def File outputDir
    
    @TaskAction
    void execute(IncrementalTaskInputs inputs) {
        inputs.outOfDate { change ->
            // Fully qualified name of class
            def classPath = change.file.name.minus('.cc').replaceAll('_', '.');
            ant.javah(class: classPath,
                      outputFile: "${outputDir.path}/${classPath.replaceAll('\\.','_')}.h",
                      classpath: inputDir.path)
            def objPath = ramcloudDir.path + '/obj.' + branch
            def command = ["g++",
                           "--std=c++0x",
                           "-shared",           
                           "-fPIC",
                           "-L${objPath}",
                           "-L${outputDir.path}",
                           "-I${objPath}",
                           "-I${ramcloudDir.path + '/src'}",
                           "-I${ramcloudDir.path + '/gtest/include'}",
                           "-I${outputDir.path}",
                           "-Iinclude",
                           "-Wl,-rpath=${objPath}:${outputDir.path}",
                           "-lramcloud",
                           "-lramcloudtest",
                           "-g",
                           "${change.file.path}",
                           "-o",
                           "${outputDir.path + '/lib' + change.file.name.minus('.cc') + '.so'}"]
            def proc = command.execute();
            proc.waitFor();
            if (proc.exitValue() != 0) {
                throw new CompilationError("\n" + proc.err.text)
            } else {
                println "Compiled: ${change.file.name}"
            }
        }
    }
}

repositories {
    mavenCentral()
}

configurations {
    build
}

// TestNG dependency. Gradle will automatically download it.
dependencies {
    build 'org.testng:testng:6.8.8', 'com.google.guava:guava:17.0'
}

// Initialize some variables, ensure output directories exist.
task directories << {
    file(buildDir).mkdirs()
    file(libDir).mkdirs()
    configurations.build.each {
        def dep = file(it.path)
        def target = file("${libDir}/${dep.name}")
        if (dep.lastModified() > target.lastModified()) {
            copy {
                from dep
                into target.parent
            }
        }
        dependencyPaths += target.path + ':'
    }
    def proc = "git rev-parse --abbrev-ref HEAD".execute(); 
    proc.waitFor();
    currentBranch = proc.in.text.trim();
}

task headerCopy << {
    FileTree files = fileTree(sourceDir).include('**/*.h')
    files.each {File file ->
        copy {
            from file
            into libDir
        }
    }
}

// C++ build
task build(type: CppBuildTask, dependsOn: ['javabuild', 'headerCopy']) {
    inputDir = file(buildDir)
    ramcloudDir = file(ramcloudPath)
    inputs = fileTree(sourceDir).include('**/*.cc')
    outputDir = file(libDir)
    doFirst {
        branch = currentBranch
    }
}

// Java build
task javabuild(type: JavaBuildTask, dependsOn: 'directories') {
    inputDir = file(sourceDir)
    inputs = fileTree(sourceDir).include('**/*.java')
    outputDir = file(buildDir)
    doFirst {
        depPaths = dependencyPaths
    }
}

// Java build for unit tests
task testjavabuild(type: JavaBuildTask, dependsOn: 'build') {
    inputDir = file(testSourceDir)
    inputs = fileTree(testSourceDir).include('**/*.java')
    outputDir = file(buildDir)
    doFirst {
        depPaths = dependencyPaths
    }
}

// C++ build for unit tests
task testbuild(type: CppBuildTask, dependsOn: ['testjavabuild']) {
    inputDir = file(buildDir)
    ramcloudDir = file(ramcloudPath)
    inputs = fileTree(testSourceDir).include('**/*.cc')
    outputDir = file(libDir)
    doFirst {
        if (!file(libDir + '/libramcloudtest.so').exists()) {
            thrown new CompilationError("Please run buildtest.sh first.\n")
        }
        branch = currentBranch
    }
}

// Clean output directories
task clean(type: Delete) {
    delete fileTree(dir: libDir, exclude: "libramcloudtest.so"), buildDir
}

// Build Javadoc
task docs << {
    logging.level = LogLevel.INFO
    ant.javadoc(sourcepath: sourceDir,
                destdir: 'docs')
}

// Run unit tests
task test << {
    logging.level = LogLevel.INFO
    ant.taskdef(name: 'testng',
                classpath: dependencyPaths,
                classname: 'org.testng.TestNGAntTask')
    ant.testng(classpath: dependencyPaths, listener: 'edu.stanford.ramcloud.test.DotTestListener') {
        sysproperty(key: 'java.library.path', value: libDir)
        classfileset(dir: buildDir, includes:'edu/stanford/ramcloud/test/*.class')
        jvmarg(line: '-Xmx1024M -Xms1024M')
    }
}

// Run TestClient
task run(type: Exec) {
    commandLine './run.sh'
}

test.dependsOn('testbuild')